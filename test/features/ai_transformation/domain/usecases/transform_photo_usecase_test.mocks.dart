// Mocks generated by Mockito 5.4.6 from annotations
// in artifex/test/features/ai_transformation/domain/usecases/transform_photo_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:artifex/core/errors/failures.dart' as _i8;
import 'package:artifex/features/ai_transformation/domain/entities/ai_provider.dart'
    as _i2;
import 'package:artifex/features/ai_transformation/domain/entities/ai_provider_type.dart'
    as _i5;
import 'package:artifex/features/ai_transformation/domain/entities/transformation_request.dart'
    as _i10;
import 'package:artifex/features/ai_transformation/domain/entities/transformation_result.dart'
    as _i9;
import 'package:artifex/features/ai_transformation/domain/repositories/ai_provider_factory.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAIProvider_0 extends _i1.SmartFake implements _i2.AIProvider {
  _FakeAIProvider_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AIProviderFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIProviderFactory extends _i1.Mock implements _i4.AIProviderFactory {
  MockAIProviderFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AIProvider get defaultProvider =>
      (super.noSuchMethod(
            Invocation.getter(#defaultProvider),
            returnValue: _FakeAIProvider_0(
              this,
              Invocation.getter(#defaultProvider),
            ),
          )
          as _i2.AIProvider);

  @override
  List<_i5.AIProviderType> get availableProviders =>
      (super.noSuchMethod(
            Invocation.getter(#availableProviders),
            returnValue: <_i5.AIProviderType>[],
          )
          as List<_i5.AIProviderType>);

  @override
  _i2.AIProvider createProvider(_i5.AIProviderType? providerType) =>
      (super.noSuchMethod(
            Invocation.method(#createProvider, [providerType]),
            returnValue: _FakeAIProvider_0(
              this,
              Invocation.method(#createProvider, [providerType]),
            ),
          )
          as _i2.AIProvider);
}

/// A class which mocks [AIProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIProvider extends _i1.Mock implements _i2.AIProvider {
  MockAIProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AIProviderType get providerType =>
      (super.noSuchMethod(
            Invocation.getter(#providerType),
            returnValue: _i5.AIProviderType.openai,
          )
          as _i5.AIProviderType);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  String get maxImageSize =>
      (super.noSuchMethod(
            Invocation.getter(#maxImageSize),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#maxImageSize),
            ),
          )
          as String);

  @override
  List<String> get supportedFormats =>
      (super.noSuchMethod(
            Invocation.getter(#supportedFormats),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.TransformationResult>> transformPhoto(
    _i10.TransformationRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformPhoto, [request]),
            returnValue:
                _i7.Future<
                  _i3.Either<_i8.Failure, _i9.TransformationResult>
                >.value(
                  _FakeEither_1<_i8.Failure, _i9.TransformationResult>(
                    this,
                    Invocation.method(#transformPhoto, [request]),
                  ),
                ),
          )
          as _i7.Future<_i3.Either<_i8.Failure, _i9.TransformationResult>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> checkServiceHealth() =>
      (super.noSuchMethod(
            Invocation.method(#checkServiceHealth, []),
            returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
              _FakeEither_1<_i8.Failure, bool>(
                this,
                Invocation.method(#checkServiceHealth, []),
              ),
            ),
          )
          as _i7.Future<_i3.Either<_i8.Failure, bool>>);

  @override
  _i7.Future<_i3.Either<_i8.Failure, double?>> estimateCost(
    _i10.TransformationRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#estimateCost, [request]),
            returnValue: _i7.Future<_i3.Either<_i8.Failure, double?>>.value(
              _FakeEither_1<_i8.Failure, double?>(
                this,
                Invocation.method(#estimateCost, [request]),
              ),
            ),
          )
          as _i7.Future<_i3.Either<_i8.Failure, double?>>);
}
