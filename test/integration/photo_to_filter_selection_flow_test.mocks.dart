// Mocks generated by Mockito 5.4.6 from annotations
// in artifex/test/integration/photo_to_filter_selection_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:artifex/core/errors/failures.dart' as _i9;
import 'package:artifex/features/photo_capture/data/datasources/photo_local_datasource.dart'
    as _i7;
import 'package:artifex/features/photo_capture/data/models/photo_model.dart'
    as _i3;
import 'package:artifex/features/photo_capture/domain/entities/photo.dart'
    as _i10;
import 'package:artifex/features/photo_capture/domain/repositories/photo_repository.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i4;
import 'package:image_picker/image_picker.dart' as _i5;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLostDataResponse_0 extends _i1.SmartFake
    implements _i2.LostDataResponse {
  _FakeLostDataResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePhotoModel_1 extends _i1.SmartFake implements _i3.PhotoModel {
  _FakePhotoModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i5.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.XFile?> pickImage({
    required _i2.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i2.CameraDevice? preferredCameraDevice = _i2.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickImage, [], {
              #source: source,
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #preferredCameraDevice: preferredCameraDevice,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i6.Future<_i2.XFile?>.value(),
          )
          as _i6.Future<_i2.XFile?>);

  @override
  _i6.Future<List<_i2.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMultiImage, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #limit: limit,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i6.Future<List<_i2.XFile>>.value(<_i2.XFile>[]),
          )
          as _i6.Future<List<_i2.XFile>>);

  @override
  _i6.Future<_i2.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMedia, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i6.Future<_i2.XFile?>.value(),
          )
          as _i6.Future<_i2.XFile?>);

  @override
  _i6.Future<List<_i2.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickMultipleMedia, [], {
              #maxWidth: maxWidth,
              #maxHeight: maxHeight,
              #imageQuality: imageQuality,
              #limit: limit,
              #requestFullMetadata: requestFullMetadata,
            }),
            returnValue: _i6.Future<List<_i2.XFile>>.value(<_i2.XFile>[]),
          )
          as _i6.Future<List<_i2.XFile>>);

  @override
  _i6.Future<_i2.XFile?> pickVideo({
    required _i2.ImageSource? source,
    _i2.CameraDevice? preferredCameraDevice = _i2.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#pickVideo, [], {
              #source: source,
              #preferredCameraDevice: preferredCameraDevice,
              #maxDuration: maxDuration,
            }),
            returnValue: _i6.Future<_i2.XFile?>.value(),
          )
          as _i6.Future<_i2.XFile?>);

  @override
  _i6.Future<_i2.LostDataResponse> retrieveLostData() =>
      (super.noSuchMethod(
            Invocation.method(#retrieveLostData, []),
            returnValue: _i6.Future<_i2.LostDataResponse>.value(
              _FakeLostDataResponse_0(
                this,
                Invocation.method(#retrieveLostData, []),
              ),
            ),
          )
          as _i6.Future<_i2.LostDataResponse>);

  @override
  bool supportsImageSource(_i2.ImageSource? source) =>
      (super.noSuchMethod(
            Invocation.method(#supportsImageSource, [source]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [PhotoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoLocalDataSource extends _i1.Mock
    implements _i7.PhotoLocalDataSource {
  MockPhotoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PhotoModel> capturePhoto() =>
      (super.noSuchMethod(
            Invocation.method(#capturePhoto, []),
            returnValue: _i6.Future<_i3.PhotoModel>.value(
              _FakePhotoModel_1(this, Invocation.method(#capturePhoto, [])),
            ),
          )
          as _i6.Future<_i3.PhotoModel>);

  @override
  _i6.Future<_i3.PhotoModel> pickImageFromGallery() =>
      (super.noSuchMethod(
            Invocation.method(#pickImageFromGallery, []),
            returnValue: _i6.Future<_i3.PhotoModel>.value(
              _FakePhotoModel_1(
                this,
                Invocation.method(#pickImageFromGallery, []),
              ),
            ),
          )
          as _i6.Future<_i3.PhotoModel>);

  @override
  _i6.Future<List<_i3.PhotoModel>> getRecentPhotos({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentPhotos, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i3.PhotoModel>>.value(
              <_i3.PhotoModel>[],
            ),
          )
          as _i6.Future<List<_i3.PhotoModel>>);

  @override
  _i6.Future<void> deletePhoto(String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePhoto, [photoId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i3.PhotoModel> savePhoto(_i3.PhotoModel? photo) =>
      (super.noSuchMethod(
            Invocation.method(#savePhoto, [photo]),
            returnValue: _i6.Future<_i3.PhotoModel>.value(
              _FakePhotoModel_1(this, Invocation.method(#savePhoto, [photo])),
            ),
          )
          as _i6.Future<_i3.PhotoModel>);
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i8.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>> capturePhoto() =>
      (super.noSuchMethod(
            Invocation.method(#capturePhoto, []),
            returnValue: _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>.value(
              _FakeEither_2<_i9.Failure, _i10.Photo>(
                this,
                Invocation.method(#capturePhoto, []),
              ),
            ),
          )
          as _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>);

  @override
  _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>> pickImageFromGallery() =>
      (super.noSuchMethod(
            Invocation.method(#pickImageFromGallery, []),
            returnValue: _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>.value(
              _FakeEither_2<_i9.Failure, _i10.Photo>(
                this,
                Invocation.method(#pickImageFromGallery, []),
              ),
            ),
          )
          as _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>);

  @override
  _i6.Future<_i4.Either<_i9.Failure, List<_i10.Photo>>> getRecentPhotos({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentPhotos, [], {#limit: limit}),
            returnValue:
                _i6.Future<_i4.Either<_i9.Failure, List<_i10.Photo>>>.value(
                  _FakeEither_2<_i9.Failure, List<_i10.Photo>>(
                    this,
                    Invocation.method(#getRecentPhotos, [], {#limit: limit}),
                  ),
                ),
          )
          as _i6.Future<_i4.Either<_i9.Failure, List<_i10.Photo>>>);

  @override
  _i6.Future<_i4.Either<_i9.Failure, void>> deletePhoto(String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePhoto, [photoId]),
            returnValue: _i6.Future<_i4.Either<_i9.Failure, void>>.value(
              _FakeEither_2<_i9.Failure, void>(
                this,
                Invocation.method(#deletePhoto, [photoId]),
              ),
            ),
          )
          as _i6.Future<_i4.Either<_i9.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>> savePhoto(
    _i10.Photo? photo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#savePhoto, [photo]),
            returnValue: _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>.value(
              _FakeEither_2<_i9.Failure, _i10.Photo>(
                this,
                Invocation.method(#savePhoto, [photo]),
              ),
            ),
          )
          as _i6.Future<_i4.Either<_i9.Failure, _i10.Photo>>);
}
